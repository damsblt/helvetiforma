// Script de test pour l'inscription via l'API Vercel
const { createClient } = require('@supabase/supabase-js')

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://qdylfeltqwvfhrnxjrek.supabase.co'
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFkeWxmZWx0cXd2ZmhybnhqcmVrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY2NDUyNzAsImV4cCI6MjA3MjIyMTI3MH0.c2LLDSMyTO3cd5qe3HGZc2LW6F3hzM57bo4UCYU6XIY'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

// URL de l'application d√©ploy√©e
const APP_URL = 'https://helvetiforma.vercel.app'

async function testRegistrationFlow() {
  console.log('üß™ Test du flux d\'inscription via API Vercel...')
  console.log('')
  
  // G√©n√©rer un email unique pour le test
  const timestamp = Date.now()
  const testEmail = `test-${timestamp}@gmail.com`
  const testPassword = 'TestPassword123!'
  
  console.log('üìß Email de test:', testEmail)
  console.log('üîë Mot de passe:', testPassword)
  console.log('')
  
  try {
    // √âtape 1: V√©rifier l'√©tat initial des profils
    console.log('1Ô∏è‚É£ V√©rification de l\'√©tat initial...')
    const { data: initialProfiles, error: initialError } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', testEmail)
    
    if (initialError) {
      console.log('‚ùå Erreur lors de la v√©rification initiale:', initialError.message)
      return
    }
    
    console.log('‚úÖ Profils existants avec cet email:', initialProfiles?.length || 0)
    console.log('')
    
    // √âtape 2: Tentative d'inscription via Supabase
    console.log('2Ô∏è‚É£ Tentative d\'inscription via Supabase...')
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          first_name: 'Test',
          last_name: 'User',
        },
      },
    })
    
    if (authError) {
      console.log('‚ùå Erreur d\'inscription:', authError.message)
      return
    }
    
    console.log('‚úÖ Inscription Supabase r√©ussie!')
    console.log('   User ID:', authData.user?.id)
    console.log('   Email confirm√©:', authData.user?.email_confirmed_at ? 'Oui' : 'Non')
    console.log('')
    
    // √âtape 3: Attendre un peu pour que le trigger se d√©clenche
    console.log('3Ô∏è‚É£ Attente du d√©clenchement du trigger (5 secondes)...')
    await new Promise(resolve => setTimeout(resolve, 5000))
    
    // √âtape 4: V√©rifier si le profil a √©t√© cr√©√©
    console.log('4Ô∏è‚É£ V√©rification de la cr√©ation du profil...')
    const { data: newProfiles, error: newError } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', testEmail)
    
    if (newError) {
      console.log('‚ùå Erreur lors de la v√©rification du profil:', newError.message)
      return
    }
    
    console.log('üìä R√©sultat:')
    console.log('   Profils trouv√©s:', newProfiles?.length || 0)
    
    if (newProfiles && newProfiles.length > 0) {
      console.log('‚úÖ SUCC√àS! Profil cr√©√© automatiquement:')
      console.log('   - ID:', newProfiles[0].id)
      console.log('   - Email:', newProfiles[0].email)
      console.log('   - Pr√©nom:', newProfiles[0].first_name)
      console.log('   - Nom:', newProfiles[0].last_name)
      console.log('   - Cr√©√© le:', newProfiles[0].created_at)
    } else {
      console.log('‚ùå √âCHEC! Aucun profil cr√©√© automatiquement')
      console.log('   Le trigger ne fonctionne pas correctement')
    }
    
    console.log('')
    
    // √âtape 5: Nettoyage (optionnel)
    console.log('5Ô∏è‚É£ Nettoyage...')
    if (authData.user) {
      // Note: La suppression d'utilisateur n√©cessite des permissions admin
      console.log('‚ö†Ô∏è  Utilisateur cr√©√© pour les tests - √† supprimer manuellement si n√©cessaire')
      console.log('   User ID √† supprimer:', authData.user.id)
    }
    
  } catch (error) {
    console.log('‚ùå Erreur g√©n√©rale:', error.message)
  }
}

// Ex√©cuter le test
testRegistrationFlow()
