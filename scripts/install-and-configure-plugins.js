require('dotenv').config({ path: '.env.local' });
const axios = require('axios');

// Configuration WordPress
const WORDPRESS_URL = process.env.NEXT_PUBLIC_WORDPRESS_URL || 'https://api.helvetiforma.ch';
const WORDPRESS_USERNAME = process.env.WORDPRESS_APP_USER || 'admin';
const WORDPRESS_APP_PASSWORD = process.env.WORDPRESS_APP_PASSWORD || '';

const wpApi = axios.create({
  baseURL: `${WORDPRESS_URL}/wp-json`,
  auth: {
    username: WORDPRESS_USERNAME,
    password: WORDPRESS_APP_PASSWORD
  }
});

async function installAndConfigurePlugins() {
  console.log('üîß Installation et configuration des plugins WordPress...');
  console.log('======================================================');

  try {
    // 1. Installer WooCommerce
    console.log('1Ô∏è‚É£ Installation de WooCommerce...');
    
    try {
      // V√©rifier si WooCommerce est d√©j√† install√©
      const pluginsResponse = await wpApi.get('/wp/v2/plugins');
      const woocommerce = pluginsResponse.data.find(p => p.plugin === 'woocommerce/woocommerce.php');
      
      if (woocommerce) {
        console.log('‚úÖ WooCommerce d√©j√† install√©');
        if (woocommerce.status !== 'active') {
          console.log('üîÑ Activation de WooCommerce...');
          await wpApi.post(`/wp/v2/plugins/${woocommerce.plugin}`, {
            status: 'active'
          });
          console.log('‚úÖ WooCommerce activ√©');
        }
      } else {
        console.log('üì¶ Installation de WooCommerce...');
        
        // Installer WooCommerce via l'API
        const installResponse = await wpApi.post('/wp/v2/plugins', {
          slug: 'woocommerce',
          status: 'active'
        });
        console.log('‚úÖ WooCommerce install√© et activ√©');
      }
    } catch (error) {
      console.log('‚ùå Erreur WooCommerce:', error.message);
      if (error.response?.data) {
        console.log('D√©tails:', error.response.data);
      }
    }

    // 2. Installer ACF
    console.log('\n2Ô∏è‚É£ Installation d\'Advanced Custom Fields...');
    
    try {
      const pluginsResponse = await wpApi.get('/wp/v2/plugins');
      const acf = pluginsResponse.data.find(p => p.plugin.includes('advanced-custom-fields'));
      
      if (acf) {
        console.log('‚úÖ ACF d√©j√† install√©');
        if (acf.status !== 'active') {
          console.log('üîÑ Activation d\'ACF...');
          await wpApi.post(`/wp/v2/plugins/${acf.plugin}`, {
            status: 'active'
          });
          console.log('‚úÖ ACF activ√©');
        }
      } else {
        console.log('üì¶ Installation d\'ACF...');
        
        // Installer ACF via l'API
        const installResponse = await wpApi.post('/wp/v2/plugins', {
          slug: 'advanced-custom-fields',
          status: 'active'
        });
        console.log('‚úÖ ACF install√© et activ√©');
      }
    } catch (error) {
      console.log('‚ùå Erreur ACF:', error.message);
      if (error.response?.data) {
        console.log('D√©tails:', error.response.data);
      }
    }

    // 3. Configurer WooCommerce
    console.log('\n3Ô∏è‚É£ Configuration de WooCommerce...');
    
    try {
      // V√©rifier que WooCommerce est accessible
      const wcResponse = await wpApi.get('/wc/v3/products');
      console.log('‚úÖ API WooCommerce accessible');
      
      // Cr√©er une cat√©gorie pour les articles premium
      console.log('üìÇ Cr√©ation de la cat√©gorie "Articles Premium"...');
      
      try {
        const categoriesResponse = await wpApi.get('/wc/v3/products/categories');
        const existingCategory = categoriesResponse.data.find(cat => cat.name === 'Articles Premium');
        
        let articleCategoryId;
        if (existingCategory) {
          articleCategoryId = existingCategory.id;
          console.log(`‚úÖ Cat√©gorie existante trouv√©e (ID: ${articleCategoryId})`);
        } else {
          const newCategory = await wpApi.post('/wc/v3/products/categories', {
            name: 'Articles Premium',
            slug: 'articles-premium'
          });
          articleCategoryId = newCategory.data.id;
          console.log(`‚úÖ Cat√©gorie cr√©√©e (ID: ${articleCategoryId})`);
        }
        
        // Stocker l'ID de cat√©gorie pour plus tard
        global.ARTICLE_CATEGORY_ID = articleCategoryId;
        
      } catch (error) {
        console.log('‚ö†Ô∏è Impossible de cr√©er la cat√©gorie:', error.message);
      }
      
    } catch (error) {
      console.log('‚ùå Erreur configuration WooCommerce:', error.message);
    }

    // 4. Cr√©er les champs ACF
    console.log('\n4Ô∏è‚É£ Configuration des champs ACF...');
    
    try {
      // V√©rifier que ACF est accessible
      const acfResponse = await wpApi.get('/acf/v3/field-groups');
      console.log('‚úÖ API ACF accessible');
      
      // Cr√©er le groupe de champs "Article Metadata"
      console.log('üìù Cr√©ation du groupe de champs "Article Metadata"...');
      
      try {
        const fieldGroup = await wpApi.post('/acf/v3/field-groups', {
          title: 'Article Metadata',
          fields: [
            {
              key: 'field_access_level',
              label: 'Access Level',
              name: 'access_level',
              type: 'select',
              choices: {
                'public': 'Public',
                'members': 'Members',
                'premium': 'Premium'
              },
              default_value: 'public',
              required: 1
            },
            {
              key: 'field_woocommerce_product_id',
              label: 'WooCommerce Product ID',
              name: 'woocommerce_product_id',
              type: 'number',
              required: 0
            },
            {
              key: 'field_preview_content',
              label: 'Preview Content',
              name: 'preview_content',
              type: 'wysiwyg',
              required: 0
            }
          ],
          location: [
            [
              {
                param: 'post_type',
                operator: '==',
                value: 'post'
              }
            ]
          ]
        });
        
        console.log('‚úÖ Groupe de champs ACF cr√©√©');
        
      } catch (error) {
        console.log('‚ö†Ô∏è Erreur cr√©ation groupe ACF:', error.message);
        if (error.response?.data) {
          console.log('D√©tails:', error.response.data);
        }
      }
      
    } catch (error) {
      console.log('‚ùå Erreur configuration ACF:', error.message);
    }

    // 5. Ajouter les endpoints personnalis√©s
    console.log('\n5Ô∏è‚É£ Configuration des endpoints personnalis√©s...');
    
    try {
      // V√©rifier si les endpoints existent d√©j√†
      const testResponse = await wpApi.get('/helvetiforma/v1/posts');
      console.log('‚úÖ Endpoints personnalis√©s d√©j√† configur√©s');
    } catch (error) {
      console.log('‚ö†Ô∏è Endpoints personnalis√©s non configur√©s');
      console.log('üìã Instructions:');
      console.log('1. Copiez le contenu de wordpress-custom-endpoints.php');
      console.log('2. Ajoutez-le √† wp-content/themes/[votre-theme]/functions.php');
      console.log('3. Ou cr√©ez un plugin personnalis√© avec ce code');
    }

    console.log('\nüéâ Configuration termin√©e !');
    console.log('\nüìã R√©sum√©:');
    console.log('- WooCommerce: install√© et configur√©');
    console.log('- ACF: install√© et configur√©');
    console.log('- Cat√©gorie "Articles Premium": cr√©√©e');
    console.log('- Groupe de champs ACF: cr√©√©');
    console.log('- Endpoints personnalis√©s: √† configurer manuellement');
    
    console.log('\nüîÑ Prochaine √©tape: Ex√©cuter le script de m√©tadonn√©es');
    console.log('Commande: node scripts/update-wordpress-metadata.js');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    if (error.response?.data) {
      console.error('D√©tails:', error.response.data);
    }
  }
}

// Ex√©cuter le script
installAndConfigurePlugins();
