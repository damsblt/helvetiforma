const axios = require('axios');
const fs = require('fs');
const path = require('path');

const WORDPRESS_URL = process.env.NEXT_PUBLIC_WORDPRESS_URL || 'https://api.helvetiforma.ch';
const WORDPRESS_USER = 'contact@helvetiforma.ch';
const WORDPRESS_APP_PASSWORD = 'RWnb nSO6 6TMX yWd0 HWFl HBYh';

async function installAndTestPlugin() {
  console.log('üîß Installation et test du plugin WordPress...\n');

  try {
    const wpApi = axios.create({
      baseURL: WORDPRESS_URL,
      auth: {
        username: WORDPRESS_USER,
        password: WORDPRESS_APP_PASSWORD
      }
    });

    // 1. V√©rifier la connexion
    console.log('1Ô∏è‚É£ V√©rification de la connexion...');
    
    const testResponse = await wpApi.get('/wp-json/wp/v2/posts?per_page=1');
    console.log('‚úÖ Connexion WordPress √©tablie');

    // 2. V√©rifier WooCommerce
    console.log('\n2Ô∏è‚É£ V√©rification de WooCommerce...');
    
    const wcResponse = await wpApi.get('/wp-json/wc/v3/products?per_page=1');
    console.log('‚úÖ WooCommerce accessible');

    // 3. V√©rifier les plugins
    console.log('\n3Ô∏è‚É£ V√©rification des plugins...');
    
    try {
      const pluginsResponse = await wpApi.get('/wp-json/wp/v2/plugins');
      const plugins = pluginsResponse.data;
      
      console.log(`‚úÖ ${plugins.length} plugins trouv√©s`);
      
      // Chercher notre plugin
      const ourPlugin = plugins.find(plugin => 
        plugin.plugin.includes('helvetiforma-premium-automation')
      );
      
      if (ourPlugin) {
        console.log(`‚úÖ Plugin trouv√©: ${ourPlugin.name}`);
        console.log(`   Statut: ${ourPlugin.status === 'active' ? '‚úÖ Actif' : '‚ùå Inactif'}`);
        
        if (ourPlugin.status !== 'active') {
          console.log('‚ö†Ô∏è Le plugin n\'est pas activ√© !');
          console.log('   Veuillez l\'activer dans l\'admin WordPress');
        }
      } else {
        console.log('‚ùå Plugin HelvetiForma Premium Automation non trouv√©');
        console.log('   Veuillez l\'installer d\'abord');
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è Impossible d\'acc√©der aux plugins via API');
    }

    // 4. Cr√©er un article de test avec m√©tadonn√©es
    console.log('\n4Ô∏è‚É£ Cr√©ation d\'un article de test...');
    
    const testPost = {
      title: 'Test Article Premium - ' + new Date().toISOString(),
      content: 'Article de test pour v√©rifier l\'automatisation',
      status: 'draft'
    };

    const postResponse = await wpApi.post('/wp-json/wp/v2/posts', testPost);
    const postId = postResponse.data.id;
    console.log(`‚úÖ Article cr√©√© (ID: ${postId})`);

    // 5. Essayer d'ajouter les m√©tadonn√©es via l'API REST
    console.log('\n5Ô∏è‚É£ Test d\'ajout des m√©tadonn√©es via API REST...');
    
    try {
      // Essayer la m√©thode standard
      await wpApi.post(`/wp-json/wp/v2/posts/${postId}/meta`, {
        meta_key: 'access_level',
        meta_value: 'premium'
      });
      console.log('‚úÖ M√©tadonn√©e access_level ajout√©e');

      await wpApi.post(`/wp-json/wp/v2/posts/${postId}/meta`, {
        meta_key: 'price',
        meta_value: '29.90'
      });
      console.log('‚úÖ M√©tadonn√©e price ajout√©e');

    } catch (metaError) {
      console.log('‚ùå Erreur lors de l\'ajout des m√©tadonn√©es:', metaError.message);
      console.log('   L\'API des m√©tadonn√©es n\'est pas accessible');
      console.log('   Cela explique pourquoi l\'automatisation ne fonctionne pas');
    }

    // 6. V√©rifier les m√©tadonn√©es
    console.log('\n6Ô∏è‚É£ V√©rification des m√©tadonn√©es...');
    
    try {
      const metaResponse = await wpApi.get(`/wp-json/wp/v2/posts/${postId}/meta`);
      const metadata = metaResponse.data;
      
      console.log(`‚úÖ ${metadata.length} m√©tadonn√©es trouv√©es`);
      
      metadata.forEach(meta => {
        console.log(`   - ${meta.meta_key}: ${meta.meta_value}`);
      });
      
    } catch (metaError) {
      console.log('‚ùå Impossible de r√©cup√©rer les m√©tadonn√©es:', metaError.message);
    }

    // 7. Publier l'article pour tester l'automatisation
    console.log('\n7Ô∏è‚É£ Test de publication...');
    
    try {
      await wpApi.post(`/wp-json/wp/v2/posts/${postId}`, {
        status: 'publish'
      });
      console.log('‚úÖ Article publi√©');
      
      // Attendre un peu pour que l'automatisation se d√©clenche
      console.log('   Attente de l\'automatisation (3 secondes)...');
      await new Promise(resolve => setTimeout(resolve, 3000));
      
    } catch (error) {
      console.log('‚ùå Erreur lors de la publication:', error.message);
    }

    // 8. V√©rifier si un produit a √©t√© cr√©√©
    console.log('\n8Ô∏è‚É£ V√©rification de la cr√©ation du produit...');
    
    try {
      const productsResponse = await wpApi.get('/wp-json/wc/v3/products', {
        params: {
          search: testPost.title,
          per_page: 10
        }
      });

      const createdProduct = productsResponse.data.find(product => 
        product.meta_data?.some(meta => 
          meta.key === 'article_post_id' && meta.value == postId
        )
      );

      if (createdProduct) {
        console.log('üéâ SUCC√àS ! Produit WooCommerce cr√©√© automatiquement :');
        console.log(`   - ID: ${createdProduct.id}`);
        console.log(`   - Nom: ${createdProduct.name}`);
        console.log(`   - Prix: ${createdProduct.regular_price} CHF`);
        console.log(`   - Statut: ${createdProduct.status}`);
      } else {
        console.log('‚ö†Ô∏è Aucun produit cr√©√© automatiquement');
        console.log('   Raisons possibles :');
        console.log('   1. Le plugin n\'est pas activ√©');
        console.log('   2. L\'API des m√©tadonn√©es n\'est pas accessible');
        console.log('   3. Il y a une erreur dans le plugin');
      }
      
    } catch (error) {
      console.log('‚ùå Erreur lors de la v√©rification des produits:', error.message);
    }

    // 9. Nettoyage
    console.log('\n9Ô∏è‚É£ Nettoyage...');
    try {
      await wpApi.delete(`/wp-json/wp/v2/posts/${postId}?force=true`);
      console.log('‚úÖ Article de test supprim√©');
    } catch (error) {
      console.log('‚ö†Ô∏è Impossible de supprimer l\'article de test');
    }

    // 10. Recommandations
    console.log('\nüîß RECOMMANDATIONS :\n');
    
    console.log('1. INSTALLEZ LE PLUGIN :');
    console.log('   - Allez dans l\'admin WordPress');
    console.log('   - Plugins ‚Üí Ajouter');
    console.log('   - T√©l√©versez le fichier: helvetiforma-premium-automation.zip');
    console.log('   - Activez le plugin');
    console.log('');
    
    console.log('2. V√âRIFIEZ LES PERMISSIONS :');
    console.log('   - L\'utilisateur doit avoir les permissions d\'√©dition des articles');
    console.log('   - L\'utilisateur doit avoir les permissions de cr√©ation de produits');
    console.log('');
    
    console.log('3. TESTEZ MANUELLEMENT :');
    console.log('   - Cr√©ez un article dans l\'admin WordPress');
    console.log('   - Ajoutez les m√©tadonn√©es via l\'interface');
    console.log('   - Publiez l\'article');
    console.log('   - V√©rifiez que le produit est cr√©√©');
    console.log('');
    
    console.log('4. V√âRIFIEZ LES LOGS :');
    console.log('   - Allez dans Outils ‚Üí Sant√© du site ‚Üí Info');
    console.log('   - Cherchez les logs d\'erreur');
    console.log('   - V√©rifiez que le plugin fonctionne correctement');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    if (error.response?.data) {
      console.error('D√©tails:', error.response.data);
    }
  }
}

// Ex√©cuter le test
installAndTestPlugin();
