const axios = require('axios');

const WORDPRESS_URL = process.env.NEXT_PUBLIC_WORDPRESS_URL || 'https://api.helvetiforma.ch';
const WORDPRESS_USER = 'contact@helvetiforma.ch';
const WORDPRESS_APP_PASSWORD = 'RWnb nSO6 6TMX yWd0 HWFl HBYh';

async function diagnoseWordPressMetadata() {
  console.log('üîç Diagnostic des m√©tadonn√©es WordPress...\n');

  try {
    const wpApi = axios.create({
      baseURL: WORDPRESS_URL,
      auth: {
        username: WORDPRESS_USER,
        password: WORDPRESS_APP_PASSWORD
      }
    });

    // 1. R√©cup√©rer tous les articles
    console.log('1Ô∏è‚É£ R√©cup√©ration des articles...');
    
    const postsResponse = await wpApi.get('/wp-json/wp/v2/posts?per_page=20');
    const posts = postsResponse.data;
    
    console.log(`‚úÖ ${posts.length} articles trouv√©s\n`);

    // 2. Analyser chaque article
    console.log('2Ô∏è‚É£ Analyse des m√©tadonn√©es de chaque article...\n');

    for (const post of posts) {
      console.log(`üìù Article: "${post.title.rendered}" (ID: ${post.id})`);
      console.log(`   Statut: ${post.status}`);
      console.log(`   Date: ${post.date}`);
      
      // R√©cup√©rer les m√©tadonn√©es
      try {
        const metaResponse = await wpApi.get(`/wp-json/wp/v2/posts/${post.id}/meta`);
        const metadata = metaResponse.data;
        
        console.log('   M√©tadonn√©es:');
        
        // Chercher access_level
        const accessLevelMeta = metadata.find(meta => meta.meta_key === 'access_level');
        if (accessLevelMeta) {
          console.log(`   ‚úÖ access_level: "${accessLevelMeta.meta_value}"`);
        } else {
          console.log('   ‚ùå access_level: Non trouv√©');
        }
        
        // Chercher price
        const priceMeta = metadata.find(meta => meta.meta_key === 'price');
        if (priceMeta) {
          console.log(`   ‚úÖ price: "${priceMeta.meta_value}" CHF`);
        } else {
          console.log('   ‚ùå price: Non trouv√©');
        }
        
        // Chercher woocommerce_product_id
        const wcProductMeta = metadata.find(meta => meta.meta_key === 'woocommerce_product_id');
        if (wcProductMeta) {
          console.log(`   ‚úÖ woocommerce_product_id: "${wcProductMeta.meta_value}"`);
        } else {
          console.log('   ‚ùå woocommerce_product_id: Non trouv√©');
        }
        
        // V√©rifier si c'est un article premium
        if (accessLevelMeta && accessLevelMeta.meta_value === 'premium') {
          console.log('   üéØ ARTICLE PREMIUM D√âTECT√â !');
          
          if (priceMeta && priceMeta.meta_value && parseFloat(priceMeta.meta_value) > 0) {
            console.log('   üí∞ Prix d√©fini, produit devrait √™tre cr√©√©');
            
            if (!wcProductMeta) {
              console.log('   ‚ö†Ô∏è PROBL√àME: Aucun produit WooCommerce li√© !');
              console.log('   üîß Solution: Le plugin n\'est peut-√™tre pas activ√© ou il y a une erreur');
            }
          } else {
            console.log('   ‚ö†Ô∏è PROBL√àME: Prix non d√©fini ou invalide');
          }
        }
        
      } catch (metaError) {
        console.log('   ‚ùå Erreur lors de la r√©cup√©ration des m√©tadonn√©es:', metaError.message);
      }
      
      console.log(''); // Ligne vide pour s√©parer
    }

    // 3. V√©rifier les produits WooCommerce
    console.log('3Ô∏è‚É£ V√©rification des produits WooCommerce...\n');
    
    try {
      const productsResponse = await wpApi.get('/wp-json/wc/v3/products?per_page=20');
      const products = productsResponse.data;
      
      console.log(`‚úÖ ${products.length} produits WooCommerce trouv√©s\n`);
      
      // Chercher les produits li√©s √† des articles
      for (const product of products) {
        const articleIdMeta = product.meta_data?.find(meta => meta.key === 'article_post_id');
        if (articleIdMeta) {
          console.log(`üîó Produit "${product.name}" (ID: ${product.id})`);
          console.log(`   Li√© √† l'article: ${articleIdMeta.value}`);
          console.log(`   Prix: ${product.regular_price} CHF`);
          console.log(`   Statut: ${product.status}\n`);
        }
      }
      
    } catch (wcError) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des produits WooCommerce:', wcError.message);
    }

    // 4. Recommandations
    console.log('4Ô∏è‚É£ Recommandations pour corriger le probl√®me...\n');
    
    console.log('üîß SOLUTIONS POSSIBLES :');
    console.log('');
    console.log('1. V√©rifiez que le plugin est activ√© :');
    console.log('   - Allez dans Plugins ‚Üí Plugins install√©s');
    console.log('   - Cherchez "HelvetiForma Premium Automation"');
    console.log('   - V√©rifiez qu\'il est activ√©');
    console.log('');
    console.log('2. V√©rifiez les logs WordPress :');
    console.log('   - Allez dans Outils ‚Üí Sant√© du site ‚Üí Info');
    console.log('   - Cherchez les logs d\'erreur');
    console.log('');
    console.log('3. Testez manuellement :');
    console.log('   - Modifiez un article premium existant');
    console.log('   - Sauvegardez-le pour d√©clencher l\'automatisation');
    console.log('');
    console.log('4. V√©rifiez les permissions :');
    console.log('   - L\'utilisateur doit avoir les permissions d\'√©dition des articles');
    console.log('   - L\'utilisateur doit avoir les permissions de cr√©ation de produits');
    console.log('');
    console.log('5. Red√©marrez le plugin :');
    console.log('   - D√©sactivez le plugin');
    console.log('   - R√©activez le plugin');
    console.log('   - Testez √† nouveau');

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error.message);
    if (error.response?.data) {
      console.error('D√©tails:', error.response.data);
    }
  }
}

// Ex√©cuter le diagnostic
diagnoseWordPressMetadata();
