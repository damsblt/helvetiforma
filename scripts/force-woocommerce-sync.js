const axios = require('axios');
require('dotenv').config({ path: '.env.local' });

const WORDPRESS_URL = process.env.NEXT_PUBLIC_WORDPRESS_URL || 'https://api.helvetiforma.ch';

const wordpressClient = axios.create({
  baseURL: `${WORDPRESS_URL}/wp-json`,
  headers: { 'Content-Type': 'application/json' },
  auth: {
    username: process.env.WORDPRESS_USER || 'contact@helvetiforma.ch',
    password: process.env.WORDPRESS_PASSWORD || 'RWnb nSO6 6TMX yWd0 HWFl HBYh',
  },
});

const woocommerceClient = axios.create({
  baseURL: `${WORDPRESS_URL}/wp-json`,
  headers: { 'Content-Type': 'application/json' },
  auth: {
    username: process.env.WOOCOMMERCE_CONSUMER_KEY || '',
    password: process.env.WOOCOMMERCE_CONSUMER_SECRET || ''
  }
});

async function forceWooCommerceSync() {
  console.log('üîÑ Synchronisation forc√©e avec WooCommerce...');
  console.log('='.repeat(50));
  
  const articleId = 3774;
  const articlePrice = 5.00;
  
  try {
    // 1. R√©cup√©rer l'article
    console.log('üìÑ R√©cup√©ration de l\'article...');
    const articleResponse = await wordpressClient.get(`/wp/v2/posts/${articleId}`);
    const article = articleResponse.data;
    console.log(`‚úÖ Article trouv√©: ${article.title.rendered}`);
    
    // 2. Configurer l'article comme premium
    console.log('\nüîß Configuration de l\'article comme premium...');
    const configResponse = await wordpressClient.post('/helvetiforma/v1/update-article-acf', {
      post_id: articleId,
      access: 'premium',
      price: articlePrice
    });
    console.log('‚úÖ Article configur√©:', configResponse.data);
    
    // 3. Synchroniser avec WooCommerce
    console.log('\nüõí Synchronisation avec WooCommerce...');
    const syncResponse = await wordpressClient.post('/helvetiforma/v1/sync-article', {
      post_id: articleId
    });
    console.log('‚úÖ Synchronisation:', syncResponse.data);
    
    // 4. V√©rifier que le produit a √©t√© cr√©√©
    console.log('\nüîç V√©rification du produit WooCommerce...');
    const productResponse = await woocommerceClient.get('/wc/v3/products', {
      params: { sku: `article-${articleId}`, per_page: 1 }
    });
    
    if (productResponse.data && productResponse.data.length > 0) {
      const product = productResponse.data[0];
      console.log('‚úÖ Produit WooCommerce cr√©√©:');
      console.log(`   - ID: ${product.id}`);
      console.log(`   - Nom: ${product.name}`);
      console.log(`   - Prix: ${product.price} CHF`);
      console.log(`   - SKU: ${product.sku}`);
      console.log(`   - Statut: ${product.status}`);
      
      // 5. Mettre √† jour les m√©tadonn√©es de l'article
      console.log('\nüìù Mise √† jour des m√©tadonn√©es de l\'article...');
      const updateMetaResponse = await wordpressClient.post('/wp/v2/posts', {
        id: articleId,
        meta: {
          woocommerce_product_id: product.id
        }
      });
      console.log('‚úÖ M√©tadonn√©es mises √† jour');
      
    } else {
      console.log('‚ùå Produit WooCommerce non trouv√© apr√®s synchronisation');
    }
    
    // 6. Tester la v√©rification d'achat
    console.log('\nüîê Test de la v√©rification d\'achat...');
    try {
      const checkResponse = await wordpressClient.get('/helvetiforma/v1/check-purchase', {
        params: { postId: articleId, userId: '193' }
      });
      console.log('‚úÖ V√©rification d\'achat:', checkResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è V√©rification d\'achat non disponible:', error.response?.data || error.message);
    }
    
    console.log('\nüéâ Synchronisation termin√©e !');
    console.log('L\'article est maintenant pr√™t pour les achats.');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la synchronisation:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.log('\nüí° V√©rifiez vos cl√©s WooCommerce dans .env.local');
    }
  }
}

forceWooCommerceSync();
