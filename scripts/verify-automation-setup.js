const fs = require('fs');
const path = require('path');

function verifyAutomationSetup() {
  console.log('üîç V√©rification de la configuration de l\'automatisation...\n');

  const envPath = path.join(process.cwd(), '.env.local');
  
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå Fichier .env.local non trouv√©');
    return false;
  }

  const envContent = fs.readFileSync(envPath, 'utf8');
  
  // Variables requises
  const requiredVars = [
    'SANITY_WEBHOOK_SECRET',
    'INTERNAL_API_SECRET',
    'WORDPRESS_USER',
    'WORDPRESS_PASSWORD',
    'NEXT_PUBLIC_WORDPRESS_URL',
    'SANITY_API_TOKEN',
    'NEXT_PUBLIC_SITE_URL'
  ];

  console.log('üìã V√©rification des variables d\'environnement :\n');

  let allConfigured = true;

  for (const varName of requiredVars) {
    const regex = new RegExp(`^${varName}=(.+)$`, 'm');
    const match = envContent.match(regex);
    
    if (match && match[1] && match[1].trim() !== '') {
      console.log(`‚úÖ ${varName} - Configur√©`);
    } else {
      console.log(`‚ùå ${varName} - Manquant ou vide`);
      allConfigured = false;
    }
  }

  // V√©rifier les fichiers API
  console.log('\nüìÅ V√©rification des fichiers API :\n');

  const apiFiles = [
    'src/app/api/sanity/webhook/route.ts',
    'src/app/api/woocommerce/create-product/route.ts'
  ];

  for (const filePath of apiFiles) {
    if (fs.existsSync(filePath)) {
      console.log(`‚úÖ ${filePath} - Existe`);
    } else {
      console.log(`‚ùå ${filePath} - Manquant`);
      allConfigured = false;
    }
  }

  // V√©rifier les scripts de test
  console.log('\nüß™ V√©rification des scripts de test :\n');

  const testFiles = [
    'scripts/test-premium-automation.js',
    'scripts/setup-premium-automation.js'
  ];

  for (const filePath of testFiles) {
    if (fs.existsSync(filePath)) {
      console.log(`‚úÖ ${filePath} - Existe`);
    } else {
      console.log(`‚ùå ${filePath} - Manquant`);
      allConfigured = false;
    }
  }

  // R√©sum√©
  console.log('\nüìä R√©sum√© de la configuration :\n');

  if (allConfigured) {
    console.log('üéâ Configuration compl√®te ! L\'automatisation est pr√™te √† √™tre utilis√©e.\n');
    
    console.log('üìã Prochaines √©tapes :');
    console.log('1. Configurez le webhook dans Sanity Studio :');
    console.log('   - URL: https://your-domain.com/api/sanity/webhook');
    console.log('   - Secret: (valeur de SANITY_WEBHOOK_SECRET)');
    console.log('   - Filter: _type == "post"');
    console.log('   - Triggers: Create, Update\n');
    
    console.log('2. Testez l\'automatisation :');
    console.log('   node scripts/test-premium-automation.js\n');
    
    console.log('3. Cr√©ez un article premium dans Sanity Studio');
    console.log('   - accessLevel = "premium"');
    console.log('   - price > 0');
    console.log('   - Le produit WooCommerce sera cr√©√© automatiquement !\n');
    
    return true;
  } else {
    console.log('‚ùå Configuration incompl√®te. Veuillez corriger les erreurs ci-dessus.\n');
    
    console.log('üîß Pour corriger :');
    console.log('1. Ex√©cutez : node scripts/setup-premium-automation.js');
    console.log('2. Modifiez .env.local avec vos vraies valeurs');
    console.log('3. Relancez cette v√©rification\n');
    
    return false;
  }
}

// Ex√©cuter la v√©rification
const isConfigured = verifyAutomationSetup();

if (isConfigured) {
  console.log('üöÄ L\'automatisation des articles premium est pr√™te !');
} else {
  console.log('‚ö†Ô∏è Veuillez compl√©ter la configuration avant de continuer.');
}
