require('dotenv').config({ path: '.env.local' });
const axios = require('axios');

// Configuration WordPress
const WORDPRESS_URL = process.env.NEXT_PUBLIC_WORDPRESS_URL || 'https://api.helvetiforma.ch';
const WORDPRESS_USERNAME = process.env.WORDPRESS_APP_USER || 'admin';
const WORDPRESS_APP_PASSWORD = process.env.WORDPRESS_APP_PASSWORD || '';

const wpApi = axios.create({
  baseURL: `${WORDPRESS_URL}/wp-json`,
  auth: {
    username: WORDPRESS_USERNAME,
    password: WORDPRESS_APP_PASSWORD
  }
});

// M√©tadonn√©es des articles migr√©s
const articlesMetadata = {
  3681: { access_level: 'premium', price: 1 },  // Test transaction 4
  3682: { access_level: 'premium', price: 5 },  // test 2
  3688: { access_level: 'premium', price: 10 }, // Les charges sociales
  3689: { access_level: 'public', price: 0 },   // test 3
  3690: { access_level: 'public', price: 0 }    // test
};

async function configureArticlesMetadata() {
  console.log('üîß Configuration des m√©tadonn√©es des articles...');
  console.log('==============================================');

  try {
    // 1. V√©rifier la connexion
    console.log('1Ô∏è‚É£ V√©rification de la connexion...');
    const meResponse = await wpApi.get('/wp/v2/users/me');
    console.log(`‚úÖ Connexion √©tablie (utilisateur: ${meResponse.data.name})`);

    // 2. R√©cup√©rer tous les articles
    console.log('\n2Ô∏è‚É£ R√©cup√©ration des articles...');
    const postsResponse = await wpApi.get('/wp/v2/posts?per_page=100');
    const posts = postsResponse.data;
    console.log(`‚úÖ ${posts.length} articles trouv√©s`);

    // 3. Configurer les m√©tadonn√©es pour chaque article
    console.log('\n3Ô∏è‚É£ Configuration des m√©tadonn√©es...');
    
    for (const [postId, meta] of Object.entries(articlesMetadata)) {
      console.log(`\nüìù Traitement de l'article ${postId}...`);
      
      try {
        // V√©rifier que l'article existe
        const post = posts.find(p => p.id == postId);
        if (!post) {
          console.log(`   ‚ö†Ô∏è Article ${postId} non trouv√©, ignor√©`);
          continue;
        }
        
        console.log(`   Titre: ${post.title.rendered}`);
        console.log(`   Configuration: ${meta.access_level} (${meta.price} CHF)`);
        
        // Mettre √† jour les custom fields natifs
        const updateData = {
          meta: {
            access_level: meta.access_level,
            price: meta.price
          }
        };
        
        await wpApi.post(`/wp/v2/posts/${postId}`, updateData);
        console.log(`   ‚úÖ M√©tadonn√©es mises √† jour`);
        
        // Si c'est un article premium, cr√©er un produit WooCommerce
        if (meta.access_level === 'premium' && meta.price > 0) {
          console.log(`   üí∞ Cr√©ation du produit WooCommerce...`);
          
          try {
            // V√©rifier si WooCommerce est disponible
            const wcResponse = await wpApi.get('/wc/v3/products');
            console.log(`   ‚úÖ WooCommerce accessible`);
            
            // Cr√©er le produit
            const product = await wpApi.post('/wc/v3/products', {
              name: post.title.rendered,
              type: 'simple',
              regular_price: meta.price.toString(),
              virtual: true,
              downloadable: false,
              status: 'publish'
            });
            
            console.log(`   ‚úÖ Produit cr√©√© (ID: ${product.data.id})`);
            
            // Lier le produit √† l'article
            await wpApi.post(`/wp/v2/posts/${postId}`, {
              meta: {
                access_level: meta.access_level,
                price: meta.price,
                woocommerce_product_id: product.data.id
              }
            });
            
            console.log(`   ‚úÖ Produit li√© √† l'article`);
            
          } catch (wcError) {
            console.log(`   ‚ö†Ô∏è WooCommerce non disponible: ${wcError.message}`);
            console.log(`   üìã Installez WooCommerce pour les articles premium`);
          }
        }
        
      } catch (error) {
        console.log(`   ‚ùå Erreur pour l'article ${postId}: ${error.message}`);
        if (error.response?.data) {
          console.log(`   D√©tails:`, error.response.data);
        }
      }
    }

    // 4. V√©rifier la configuration
    console.log('\n4Ô∏è‚É£ V√©rification de la configuration...');
    
    for (const [postId, meta] of Object.entries(articlesMetadata)) {
      try {
        const postResponse = await wpApi.get(`/wp/v2/posts/${postId}`);
        const post = postResponse.data;
        
        console.log(`\nüìã Article ${postId} (${post.title.rendered}):`);
        console.log(`   Access Level: ${post.meta?.access_level || 'Non d√©fini'}`);
        console.log(`   Prix: ${post.meta?.price || 'Non d√©fini'} CHF`);
        console.log(`   WooCommerce ID: ${post.meta?.woocommerce_product_id || 'Non d√©fini'}`);
        
      } catch (error) {
        console.log(`   ‚ùå Impossible de v√©rifier l'article ${postId}`);
      }
    }

    console.log('\nüéâ Configuration termin√©e !');
    console.log('\nüìã R√©sum√©:');
    console.log('- M√©tadonn√©es des articles configur√©es');
    console.log('- Produits WooCommerce cr√©√©s pour les articles premium');
    console.log('- Custom fields natifs WordPress utilis√©s');
    
    console.log('\nüîÑ Prochaines √©tapes:');
    console.log('1. Installez WooCommerce et ACF dans WordPress Admin');
    console.log('2. Ajoutez le code PHP des endpoints personnalis√©s');
    console.log('3. Testez l\'application Next.js');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    if (error.response?.data) {
      console.error('D√©tails:', error.response.data);
    }
  }
}

// Ex√©cuter le script
configureArticlesMetadata();
