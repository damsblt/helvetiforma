const axios = require('axios');

const WORDPRESS_URL = process.env.NEXT_PUBLIC_WORDPRESS_URL || 'https://api.helvetiforma.ch';
const WORDPRESS_USER = 'damien.balet@me.com';
const WORDPRESS_PASSWORD = 'EchU Msw4 5veB hETM aJvb Omcw';

async function grantAdminPermissions() {
  console.log('üîß Attribution des permissions administrateur √†:', WORDPRESS_USER);
  
  try {
    const auth = Buffer.from(`${WORDPRESS_USER}:${WORDPRESS_PASSWORD}`).toString('base64');
    
    // 1. V√©rifier l'utilisateur actuel
    console.log('\n1Ô∏è‚É£ V√©rification de l\'utilisateur actuel...');
    const meResponse = await axios.get(`${WORDPRESS_URL}/wp-json/wp/v2/users/me`, {
      headers: { 'Authorization': `Basic ${auth}` }
    });
    
    const userId = meResponse.data.id;
    console.log('‚úÖ Utilisateur ID:', userId);
    console.log('üë§ Nom:', meResponse.data.name);
    
    // 2. Mettre √† jour l'utilisateur avec le r√¥le administrateur
    console.log('\n2Ô∏è‚É£ Attribution du r√¥le administrateur...');
    const updateResponse = await axios.put(`${WORDPRESS_URL}/wp-json/wp/v2/users/${userId}`, {
      roles: ['administrator']
    }, {
      headers: { 
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ R√¥le administrateur attribu√© !');
    console.log('üîë Nouveaux r√¥les:', updateResponse.data.roles);
    
    // 3. V√©rifier les nouvelles permissions
    console.log('\n3Ô∏è‚É£ V√©rification des nouvelles permissions...');
    const verifyResponse = await axios.get(`${WORDPRESS_URL}/wp-json/wp/v2/users/me`, {
      headers: { 'Authorization': `Basic ${auth}` }
    });
    
    console.log('‚úÖ V√©rification r√©ussie');
    console.log('üîë R√¥les confirm√©s:', verifyResponse.data.roles);
    
    // 4. Tester l'API REST qui posait probl√®me
    console.log('\n4Ô∏è‚É£ Test de l\'API REST...');
    const typesResponse = await axios.get(`${WORDPRESS_URL}/wp-json/wp/v2/types/post?context=edit`, {
      headers: { 'Authorization': `Basic ${auth}` }
    });
    
    console.log('‚úÖ API REST accessible !');
    console.log('üìã Type de post:', typesResponse.data.name);
    
    // 5. Tester l'acc√®s aux posts
    console.log('\n5Ô∏è‚É£ Test d\'acc√®s aux posts...');
    const postsResponse = await axios.get(`${WORDPRESS_URL}/wp-json/wp/v2/posts?per_page=5`, {
      headers: { 'Authorization': `Basic ${auth}` }
    });
    
    console.log('‚úÖ Acc√®s aux posts OK -', postsResponse.data.length, 'posts trouv√©s');
    
    console.log('\nüéâ SUCC√àS ! L\'utilisateur a maintenant toutes les permissions administrateur');
    console.log('‚úÖ L\'erreur 403 Forbidden devrait √™tre r√©solue');
    console.log('‚úÖ La liste d\'articles devrait maintenant s\'afficher correctement');
    
  } catch (error) {
    console.log('‚ùå Erreur lors de l\'attribution des permissions:', error.response?.status);
    if (error.response?.data) {
      console.log('üìÑ Message:', error.response.data.message);
      console.log('üìÑ Code:', error.response.data.code);
    }
    
    // Si l'erreur est 403, essayer une approche alternative
    if (error.response?.status === 403) {
      console.log('\n‚ö†Ô∏è Erreur 403 - L\'utilisateur n\'a pas les permissions pour se modifier lui-m√™me');
      console.log('üí° Solution: Connectez-vous avec un autre compte administrateur pour modifier cet utilisateur');
    }
  }
}

// Ex√©cuter le script
grantAdminPermissions();
